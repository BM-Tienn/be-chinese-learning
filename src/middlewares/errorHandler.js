const AppError = require('../utils/appError'); // L·ªõp l·ªói t√πy ch·ªânh

// X·ª≠ l√Ω l·ªói CastError c·ªßa Mongoose (v√≠ d·ª•: ID kh√¥ng h·ª£p l·ªá)
const handleCastErrorDB = err => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400); // Tr·∫£ v·ªÅ l·ªói 400 Bad Request
};

// X·ª≠ l√Ω l·ªói tr√πng l·∫∑p tr∆∞·ªùng trong MongoDB (m√£ l·ªói 11000)
const handleDuplicateFieldsDB = err => {
  const value = err.keyValue ? Object.values(err.keyValue)[0] : 'duplicate value';
  const message = `Duplicate field value: "${value}". Please use another value!`;
  return new AppError(message, 400); // Tr·∫£ v·ªÅ l·ªói 400 Bad Request
};

// X·ª≠ l√Ω l·ªói x√°c th·ª±c c·ªßa Mongoose (Validation Error)
const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message); // L·∫•y t·∫•t c·∫£ c√°c th√¥ng b√°o l·ªói x√°c th·ª±c
  const message = `Invalid input data. ${errors.join('. ')}`;
  return new AppError(message, 400); // Tr·∫£ v·ªÅ l·ªói 400 Bad Request
};

// X·ª≠ l√Ω l·ªói JWT kh√¥ng h·ª£p l·ªá
const handleJWTError = () => new AppError('Invalid token. Please log in again!', 401); // Tr·∫£ v·ªÅ l·ªói 401 Unauthorized

// X·ª≠ l√Ω l·ªói JWT h·∫øt h·∫°n
const handleJWTExpiredError = () => new AppError('Your token has expired! Please log in again.', 401); // Tr·∫£ v·ªÅ l·ªói 401 Unauthorized

// G·ª≠i chi ti·∫øt l·ªói trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
const sendErrorDev = (err, req, res) => {
  console.error('ERROR üí•', err);
  return res.status(err.statusCode).json({
    status: err.status,
    error: {
      statusCode: err.statusCode,
      status: err.status,
      isOperational: err.isOperational
    },
    message: err.message,
    stack: err.stack // Bao g·ªìm stack trace trong m√¥i tr∆∞·ªùng dev
  });
};

// G·ª≠i th√¥ng b√°o l·ªói th√¢n thi·ªán trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t
const sendErrorProd = (err, req, res) => {
  // L·ªói ho·∫°t ƒë·ªông (operational error): g·ª≠i th√¥ng b√°o cho client
  if (err.isOperational) {
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });
  }
  // L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh: kh√¥ng ti·∫øt l·ªô chi ti·∫øt l·ªói
  console.error('ERROR üí•', err); // Ghi log l·ªói ƒë·∫ßy ƒë·ªß
  return res.status(500).json({
    status: 'error',
    message: 'Something went very wrong!' // Th√¥ng b√°o l·ªói chung
  });
};

// Middleware x·ª≠ l√Ω l·ªói to√†n c·ª•c
module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500; // ƒê·∫∑t m√£ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh l√† 500
  err.status = err.status || 'error'; // ƒê·∫∑t tr·∫°ng th√°i l·ªói m·∫∑c ƒë·ªãnh

  // ƒê·∫£m b·∫£o kh√¥ng bao gi·ªù tr·∫£ v·ªÅ stack trace trong production
  const isDevelopment = process.env.NODE_ENV === 'development';
  const isProduction = process.env.NODE_ENV === 'production';

  if (isDevelopment) {
    sendErrorDev(err, req, res); // G·ª≠i l·ªói chi ti·∫øt trong dev
  } else if (isProduction) {
    let error = { ...err }; // T·∫°o b·∫£n sao c·ªßa ƒë·ªëi t∆∞·ª£ng l·ªói
    error.message = err.message; // ƒê·∫£m b·∫£o th√¥ng b√°o l·ªói ƒë∆∞·ª£c sao ch√©p

    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ c·ªßa Mongoose v√† JWT
    if (error.name === 'CastError') error = handleCastErrorDB(error);
    if (error.code === 11000) error = handleDuplicateFieldsDB(error);
    if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
    if (error.name === 'JsonWebTokenError') error = handleJWTError();
    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

    sendErrorProd(error, req, res); // G·ª≠i l·ªói th√¢n thi·ªán trong production
  } else {
    // Fallback cho c√°c m√¥i tr∆∞·ªùng kh√°c - x·ª≠ l√Ω nh∆∞ production
    let error = { ...err };
    error.message = err.message;
    sendErrorProd(error, req, res);
  }
};
